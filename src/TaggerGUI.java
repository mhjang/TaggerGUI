/**
 * Created by mhjang on 4/24/14.
 */
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;


class NoiseAction extends AbstractAction {
        TaggerGUI frame;
        public NoiseAction(TaggerGUI frame)
        {
            this.frame = frame;

        }
        @Override
        public void actionPerformed(ActionEvent e) {
            //    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            frame.getSaveButton().setEnabled(true);

            DefaultListModel lm = (DefaultListModel)frame.getJList().getModel();
            String line = (String)frame.getJList().getSelectedValue();
            int[] indices = frame.getJList().getSelectedIndices();
            for(int i=0; i<indices.length; i++) {
                line = (String)lm.getElementAt(indices[i]);
                if(line.contains("<RELEVANT>")) {
                    line = line.replace("<RELEVANT>", "<NOISE-A>");
                    line = line.replace("</RELEVANT>", "</NOISE-A>");
                }
                else if(!line.contains("<NOISE-A>")) {
                    line = "<NOISE-A>" + line + "</NOISE-A>";
                }
                lm.setElementAt(line, indices[i]);
                System.out.println(indices[i]);

            }

            System.out.println("<NOISE-A>" + line + "</NOISE-A>");
            frame.getJList().setSelectedIndex(indices[indices.length-1]+1);
            frame.getJScrollPane().revalidate();
            frame.getJScrollPane().repaint();


        }
}



class MyListModel extends DefaultListModel {
    int lastTaggedLine = 0;
    public MyListModel(String[] data) {
        strings = data;
    }
    public MyListModel() {

    }
    String[] strings = { "Load a new document to tag" };
    public int getSize() { return strings.length; }
    public Object getElementAt(int i) { return strings[i]; }
    public void setElementAt(Object obj, int i) {
        strings[i] = (String)obj; fireContentsChanged(this, i, i);
        if(i>lastTaggedLine) lastTaggedLine = i;
    }
    public void setData(String[] data) {
        strings = data;
    }
    public int getLastTaggedLine() {
        return lastTaggedLine;
    }
    public String[] getData() {
        return strings;
    }
}
/**
 *
 * @author mhjang
 */
public class TaggerGUI extends javax.swing.JFrame {
    BufferedWriter bw; // output file writer
    int currentLine;
    String filenameSaved;
    static String noiseATag = "<NOISE-A>";
    static String noiseBTag = "<NOISE-B>";
    static String relevantTag = "<RELEVANT>";
    static String noiseATagClose = "</NOISE-A>";
    static String noiseBTagClose = "</NOISE-B>";
    static String relevantTagClose = "</RELEVANT>";
    /**
     * Creates new form NewJFrame
     */
    public TaggerGUI() {
        initComponents();
        jList1.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        //      jButton1.addActionListener(na);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        noiseButton = new javax.swing.JButton();
        relevantButton = new javax.swing.JButton();
        semanticNoiseButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        saveButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jScrollPane3 =  new javax.swing.JScrollPane();
        sentenceList = new javax.swing.JList();
        revertButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        noiseButton.setText("Syntatic Noise (CTRL+Q)");
        noiseButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("control Q"), "NOISE_ACTION_A");
        noiseButton.getActionMap().put("NOISE_ACTION_A", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                noiseButton.doClick();
            }
        });
        noiseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noiseButtonActionPerformed(evt);
            }
        });


        relevantButton.setText("Relevant (CTRL+E)");
        relevantButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("control E"), "RELEVANT_ACTION");
        relevantButton.getActionMap().put("RELEVANT_ACTION", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                relevantButton.doClick();
            }
        });
        relevantButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                relevantButtonActionPerformed(evt);
            }
        });

        semanticNoiseButton.setText("Semantic Noise (CTRL+W)");
        semanticNoiseButton.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke("control W"), "NOISE_ACTION_B");
        semanticNoiseButton.getActionMap().put("NOISE_ACTION_B", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                semanticNoiseButton.doClick();
            }
        });
        semanticNoiseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //         semanticNoiseButtonActionPerformed(evt);
                noiseButtonActionPerformed(evt);
            }
        });

        revertButton.setText("Revert");
        revertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revertButtonActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(sentenceList);

        jList1.setModel(new MyListModel());
        sentenceList.setModel(new MyListModel());

        jScrollPane1.setViewportView(jList1);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });



        jMenu1.setText("File");

        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        jList1.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) throws NullPointerException {
                if (!jList1.isSelectionEmpty()) {
                    String line = (String) jList1.getSelectedValue();
                    String[] tokens;
                    if (line.contains(" "))
                        tokens = line.split(" ");
                    else
                        tokens = new String[]{""};
                    sentenceList.setModel(new MyListModel(tokens));
                    jScrollPane3.revalidate();
                    jScrollPane3.repaint();
                    sentenceList.repaint();

                }
                else{
                    String[] tokens = new String[]{""};

                    sentenceList.setModel(new MyListModel(tokens));
                    jScrollPane3.revalidate();
                    jScrollPane3.repaint();
                    sentenceList.repaint();
                }
            }
        });


        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(noiseButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(relevantButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(semanticNoiseButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(revertButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 314, javax.swing.GroupLayout.DEFAULT_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 212, GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                                        .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 212, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(noiseButton)
                                        .addComponent(relevantButton)
                                        .addComponent(semanticNoiseButton)
                                        .addComponent(revertButton)
                                        .addComponent(saveButton))

                                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>

    private void noiseButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        String beginTag, closeTag;
        if(evt.getSource() == noiseButton) {
            beginTag = noiseATag;
            closeTag = noiseATagClose;
        }
        else {
            beginTag = noiseBTag;
            closeTag = noiseBTagClose;
        }

        saveButton.setEnabled(true);

        JList activeObject;
        boolean sentenceListActivated = false;
        if(sentenceList.isSelectionEmpty())
            activeObject = jList1;
        else {
            activeObject = sentenceList;
            sentenceListActivated = true;
        }
        MyListModel lm = (MyListModel)activeObject.getModel();
        String line = (String)activeObject.getSelectedValue();
        int[] indices = activeObject.getSelectedIndices();
        String originalLine;
        for(int i=0; i<indices.length; i++) {
            line = (String)lm.getElementAt(indices[i]);
            originalLine = line;
            if(line.contains(relevantTag)) {
                line = line.replace(relevantTag, beginTag);
                line = line.replace(relevantTagClose, closeTag);
            }
            else if(!line.contains(beginTag)) {
                line = beginTag + line + closeTag;
            }
            lm.setElementAt(line, indices[i]);
            System.out.println(indices[i]);
            if(sentenceListActivated) {
                int indexInTokenizedList = indices[i];
                String jlistLine = (String)jList1.getSelectedValue();
                int tokenIdx = findIndexOfNthToken(jlistLine, indices[i]);
                jlistLine = jlistLine.substring(0, tokenIdx) + jlistLine.substring(tokenIdx).replaceFirst(Pattern.quote(originalLine), line);
                jlistLine = jlistLine.replace(noiseATagClose + " " + noiseATag, " ");
                jlistLine = jlistLine.replace(noiseBTagClose + " " + noiseBTag, " ");


                MyListModel jlistModel = (MyListModel)jList1.getModel();
                System.out.println(jlistLine);
                jlistModel.setElementAt(jlistLine, jList1.getSelectedIndex());
            }

        }



    //    System.out.println("<NOISE-A>" + line + "</NOISE-A>");
        activeObject.setSelectedIndex(indices[indices.length-1]+1);
        jScrollPane1.revalidate();
        jScrollPane1.repaint();

    }


    private int findIndexOfNthToken(String line, int tokenIdx) {
        String[] tokens = line.split(" ");
        int curIdx = 0;
        for(int i=0; i<tokenIdx; i++) {
            curIdx += tokens[i].length();
            curIdx++; // for a blank space
        }
        System.out.println(tokens[tokenIdx]+"vs " + line.substring(curIdx, curIdx + tokens[tokenIdx].length()));
        return curIdx;

    }
    private void relevantButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        saveButton.setEnabled(true);

        DefaultListModel lm = (DefaultListModel)jList1.getModel();
        String line = (String)jList1.getSelectedValue();
        int[] indices = jList1.getSelectedIndices();
        for(int i=0; i<indices.length; i++) {
            line = (String)lm.getElementAt(indices[i]);
            if(line.contains("<NOISE-A>")) {
                line = line.replace("<NOISE-A>", "<RELEVANT>");
                line = line.replace("</NOISE-A>", "</RELEVANT>");
            }
            else if(line.contains("<NOISE-B>")) {
                line = line.replace("<NOISE-B>", "<RELEVANT>");
                line = line.replace("</NOISE-B>", "</RELEVANT>");
            }
            else if(!line.contains("<RELEVANT>")) {
                line = "<RELEVANT>" + line + "<RELEVANT>";
            }
            lm.setElementAt(line, indices[i]);
            System.out.println(indices[i]);

        }
//        jList1.setModel(lm);
        System.out.println("<RELEVANT>" + line + "</RELEVANT>");
        jList1.setSelectedIndex(jList1.getSelectedIndex()+1);
        jScrollPane1.revalidate();
        jScrollPane1.repaint();

    }

    private void semanticNoiseButtonActionPerformed(java.awt.event.ActionEvent evt) {
        saveButton.setEnabled(true);

        DefaultListModel lm = (DefaultListModel)jList1.getModel();
        String line = (String)jList1.getSelectedValue();
        int[] indices = jList1.getSelectedIndices();
        for(int i=0; i<indices.length; i++) {
            line = (String)lm.getElementAt(indices[i]);
            if(line.contains("<NOISE-A>")) {
                line = line.replace("<NOISE-A>", "<NOISE-B>");
                line = line.replace("</NOISE-A>", "</NOISE-B>");
            }
            else if(line.contains("<RELEVANT>")) {
                line = line.replace("<RELEVANT>", "<NOISE-B>");
                line = line.replace("</RELEVANT>", "</NOISE-B>");
            }
            else if(!line.contains("<NOISE-B>")) {
                line = "<NOISE-B>" + line + "</NOISE-B>";
            }
            lm.setElementAt(line, indices[i]);
            System.out.println(indices[i]);

        }

//        System.out.println("<NOISE-A>" + line + "</NOISE-A>");
        jList1.setSelectedIndex(indices[indices.length-1]+1);
        jScrollPane1.revalidate();
        jScrollPane1.repaint();
    }

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        saveButton.setEnabled(true);

        final JFileChooser fc = new JFileChooser();

        fc.setCurrentDirectory(new File("/Users/mhjang/Documents/teaching_documents/extracted/"));
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                //This is where a real application would open the file.
                BufferedReader br = new BufferedReader(new FileReader(file));
                String line;
                ArrayList<String> data = new ArrayList<String>();
                while((line = br.readLine())!= null) {
                    if(!line.isEmpty())
                        data.add(line = line.replace(relevantTag, "").replace(relevantTagClose, ""));
                }
                String[] dataAsString = new String[data.size()];
                data.toArray(dataAsString);
                MyListModel lm = new MyListModel(dataAsString);
                jList1.setModel(lm);
                //    lm.setData(dataAsString);
                jScrollPane1.revalidate();
                jScrollPane1.repaint();
                jList1.revalidate();
                jList1.repaint();
                filenameSaved = file.getName();

            } catch (Exception ex) {
                Logger.getLogger(TaggerGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }

    private void noiseButtonKeyPressed(java.awt.event.KeyEvent evt) {
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_Q)
            noiseButtonActionPerformed(null);
    }

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        try {
            bw = new BufferedWriter(new FileWriter(new File("/Users/mhjang/Desktop/clearnlp/annotation/"+filenameSaved)));
        } catch (IOException e) {
            e.printStackTrace();
        }

        MyListModel model = (MyListModel)jList1.getModel();
        String[] data = model.getData();
        try{
            for(int i=0; i<data.length; i++) {
                bw.write(data[i] + "<BR> \n");

            }
            bw.flush();
            JOptionPane.showMessageDialog(this, "Saved at" + filenameSaved);
            saveButton.setEnabled(false);
        }catch(Exception e) {
            e.printStackTrace();
        }

    }


    private void revertButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        MyListModel model = (MyListModel)jList1.getModel();
        DefaultListModel lm = (DefaultListModel)jList1.getModel();
        String line = (String)jList1.getSelectedValue();
        line = line.replace("<NOISE-A>", "");
        line = line.replace("</NOISE-A>", "");
        line = line.replace("<RELEVANT>", "");
        line = line.replace("</RELEVANT>", "");
        line = line.replace("<NOISE-B>", "");
        line = line.replace("</NOISE-B>", "");
        lm.setElementAt(line, jList1.getSelectedIndex());

        sentenceList.setModel(new MyListModel(line.split(" ")));
        jScrollPane1.revalidate();
        jScrollPane3.revalidate();
        sentenceList.repaint();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaggerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaggerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaggerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaggerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TaggerGUI tg = new TaggerGUI();
                tg.setVisible(true);
                tg.setSize(700, 500);



            }
        });
    }

    public JButton getSaveButton() {
        return saveButton;
    }

    public JButton getNoiseButton() {
        return noiseButton;
    }

    public JButton getRelevantButton() {
        return relevantButton;
    }

    public JList getJList() {
        return jList1;
    }

    public JScrollPane getJScrollPane() {
        return jScrollPane1;
    }
    // Variables declaration - do not modify
    private javax.swing.JButton saveButton;
    private javax.swing.JList jList1;
    private javax.swing.JList sentenceList;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JButton revertButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton semanticNoiseButton;
    private javax.swing.JButton noiseButton;
    private javax.swing.JButton relevantButton;

    // End of variables declaration
}
